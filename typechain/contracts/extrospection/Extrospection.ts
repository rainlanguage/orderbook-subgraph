/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ExtrospectionInterface extends utils.Interface {
  functions: {
    "bytecode(address)": FunctionFragment;
    "bytecodeHash(address)": FunctionFragment;
    "emitBytecodeHash(address)": FunctionFragment;
    "emitSupportsInterface(address,bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bytecode"
      | "bytecodeHash"
      | "emitBytecodeHash"
      | "emitSupportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bytecode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bytecodeHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitBytecodeHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSupportsInterface",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "bytecode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitSupportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "BytecodeHash(address,address,bytes32)": EventFragment;
    "SupportsInterface(address,address,bytes4,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BytecodeHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportsInterface"): EventFragment;
}

export interface BytecodeHashEventObject {
  sender: string;
  account: string;
  bytecodeHash: string;
}
export type BytecodeHashEvent = TypedEvent<
  [string, string, string],
  BytecodeHashEventObject
>;

export type BytecodeHashEventFilter = TypedEventFilter<BytecodeHashEvent>;

export interface SupportsInterfaceEventObject {
  sender: string;
  account: string;
  interfaceId: string;
  supportsInterface: boolean;
}
export type SupportsInterfaceEvent = TypedEvent<
  [string, string, string, boolean],
  SupportsInterfaceEventObject
>;

export type SupportsInterfaceEventFilter =
  TypedEventFilter<SupportsInterfaceEvent>;

export interface Extrospection extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExtrospectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bytecode(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bytecodeHash(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    emitBytecodeHash(
      account_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitSupportsInterface(
      account_: PromiseOrValue<string>,
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bytecode(
    account_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  bytecodeHash(
    account_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  emitBytecodeHash(
    account_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitSupportsInterface(
    account_: PromiseOrValue<string>,
    interfaceId_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bytecode(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    bytecodeHash(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    emitBytecodeHash(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitSupportsInterface(
      account_: PromiseOrValue<string>,
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BytecodeHash(address,address,bytes32)"(
      sender?: null,
      account?: null,
      bytecodeHash?: null
    ): BytecodeHashEventFilter;
    BytecodeHash(
      sender?: null,
      account?: null,
      bytecodeHash?: null
    ): BytecodeHashEventFilter;

    "SupportsInterface(address,address,bytes4,bool)"(
      sender?: null,
      account?: null,
      interfaceId?: null,
      supportsInterface?: null
    ): SupportsInterfaceEventFilter;
    SupportsInterface(
      sender?: null,
      account?: null,
      interfaceId?: null,
      supportsInterface?: null
    ): SupportsInterfaceEventFilter;
  };

  estimateGas: {
    bytecode(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytecodeHash(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emitBytecodeHash(
      account_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitSupportsInterface(
      account_: PromiseOrValue<string>,
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bytecode(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytecodeHash(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitBytecodeHash(
      account_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitSupportsInterface(
      account_: PromiseOrValue<string>,
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
