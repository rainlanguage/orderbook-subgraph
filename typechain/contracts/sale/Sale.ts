/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type DeployerDiscoverableMetaV1ConstructionConfigStruct = {
  deployer: PromiseOrValue<string>;
  meta: PromiseOrValue<BytesLike>;
};

export type DeployerDiscoverableMetaV1ConstructionConfigStructOutput = [
  string,
  string
] & { deployer: string; meta: string };

export type SaleConstructorConfigStruct = {
  maximumSaleTimeout: PromiseOrValue<BigNumberish>;
  cloneFactory: PromiseOrValue<string>;
  redeemableERC20Implementation: PromiseOrValue<string>;
  deployerDiscoverableMetaConfig: DeployerDiscoverableMetaV1ConstructionConfigStruct;
};

export type SaleConstructorConfigStructOutput = [
  BigNumber,
  string,
  string,
  DeployerDiscoverableMetaV1ConstructionConfigStructOutput
] & {
  maximumSaleTimeout: BigNumber;
  cloneFactory: string;
  redeemableERC20Implementation: string;
  deployerDiscoverableMetaConfig: DeployerDiscoverableMetaV1ConstructionConfigStructOutput;
};

export type BuyConfigStruct = {
  feeRecipient: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
  minimumUnits: PromiseOrValue<BigNumberish>;
  desiredUnits: PromiseOrValue<BigNumberish>;
  maximumPrice: PromiseOrValue<BigNumberish>;
};

export type BuyConfigStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  feeRecipient: string;
  fee: BigNumber;
  minimumUnits: BigNumber;
  desiredUnits: BigNumber;
  maximumPrice: BigNumber;
};

export type ReceiptStruct = {
  id: PromiseOrValue<BigNumberish>;
  feeRecipient: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
  units: PromiseOrValue<BigNumberish>;
  price: PromiseOrValue<BigNumberish>;
};

export type ReceiptStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  feeRecipient: string;
  fee: BigNumber;
  units: BigNumber;
  price: BigNumber;
};

export type EvaluableConfigStruct = {
  deployer: PromiseOrValue<string>;
  sources: PromiseOrValue<BytesLike>[];
  constants: PromiseOrValue<BigNumberish>[];
};

export type EvaluableConfigStructOutput = [string, string[], BigNumber[]] & {
  deployer: string;
  sources: string[];
  constants: BigNumber[];
};

export type SaleConfigStruct = {
  recipient: PromiseOrValue<string>;
  reserve: PromiseOrValue<string>;
  saleTimeout: PromiseOrValue<BigNumberish>;
  cooldownDuration: PromiseOrValue<BigNumberish>;
  minimumRaise: PromiseOrValue<BigNumberish>;
  dustSize: PromiseOrValue<BigNumberish>;
  evaluableConfig: EvaluableConfigStruct;
};

export type SaleConfigStructOutput = [
  string,
  string,
  number,
  number,
  BigNumber,
  BigNumber,
  EvaluableConfigStructOutput
] & {
  recipient: string;
  reserve: string;
  saleTimeout: number;
  cooldownDuration: number;
  minimumRaise: BigNumber;
  dustSize: BigNumber;
  evaluableConfig: EvaluableConfigStructOutput;
};

export type ERC20ConfigStruct = {
  name: PromiseOrValue<string>;
  symbol: PromiseOrValue<string>;
  distributor: PromiseOrValue<string>;
  initialSupply: PromiseOrValue<BigNumberish>;
};

export type ERC20ConfigStructOutput = [string, string, string, BigNumber] & {
  name: string;
  symbol: string;
  distributor: string;
  initialSupply: BigNumber;
};

export type SaleRedeemableERC20ConfigStruct = {
  erc20Config: ERC20ConfigStruct;
  tier: PromiseOrValue<string>;
  minimumTier: PromiseOrValue<BigNumberish>;
  distributionEndForwardingAddress: PromiseOrValue<string>;
};

export type SaleRedeemableERC20ConfigStructOutput = [
  ERC20ConfigStructOutput,
  string,
  BigNumber,
  string
] & {
  erc20Config: ERC20ConfigStructOutput;
  tier: string;
  minimumTier: BigNumber;
  distributionEndForwardingAddress: string;
};

export interface SaleInterface extends utils.Interface {
  functions: {
    "buy((address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "claimFees(address)": FunctionFragment;
    "end()": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "previewCalculateBuy(uint256)": FunctionFragment;
    "previewCanLive()": FunctionFragment;
    "refund((uint256,address,uint256,uint256,uint256))": FunctionFragment;
    "remainingTokenInventory()": FunctionFragment;
    "reserve()": FunctionFragment;
    "saleStatus()": FunctionFragment;
    "start()": FunctionFragment;
    "timeout()": FunctionFragment;
    "token()": FunctionFragment;
    "totalReserveReceived()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy"
      | "claimFees"
      | "end"
      | "initialize"
      | "previewCalculateBuy"
      | "previewCanLive"
      | "refund"
      | "remainingTokenInventory"
      | "reserve"
      | "saleStatus"
      | "start"
      | "timeout"
      | "token"
      | "totalReserveReceived"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [BuyConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewCalculateBuy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewCanLive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [ReceiptStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingTokenInventory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "timeout", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalReserveReceived",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewCalculateBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewCanLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingTokenInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalReserveReceived",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,tuple,tuple)": EventFragment;
    "Construct(address,tuple)": EventFragment;
    "Context(address,uint256[][])": EventFragment;
    "CooldownInitialize(address,uint256)": EventFragment;
    "CooldownTriggered(address,uint256)": EventFragment;
    "End(address,uint8)": EventFragment;
    "Initialize(address,tuple,tuple,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MetaV1(address,uint256,bytes)": EventFragment;
    "Refund(address,tuple)": EventFragment;
    "Start(address)": EventFragment;
    "Timeout(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Construct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Context"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CooldownInitialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CooldownTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "End"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaV1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Timeout"): EventFragment;
}

export interface BuyEventObject {
  sender: string;
  config: BuyConfigStructOutput;
  receipt: ReceiptStructOutput;
}
export type BuyEvent = TypedEvent<
  [string, BuyConfigStructOutput, ReceiptStructOutput],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface ConstructEventObject {
  sender: string;
  config: SaleConstructorConfigStructOutput;
}
export type ConstructEvent = TypedEvent<
  [string, SaleConstructorConfigStructOutput],
  ConstructEventObject
>;

export type ConstructEventFilter = TypedEventFilter<ConstructEvent>;

export interface ContextEventObject {
  sender: string;
  context: BigNumber[][];
}
export type ContextEvent = TypedEvent<
  [string, BigNumber[][]],
  ContextEventObject
>;

export type ContextEventFilter = TypedEventFilter<ContextEvent>;

export interface CooldownInitializeEventObject {
  sender: string;
  cooldownDuration: BigNumber;
}
export type CooldownInitializeEvent = TypedEvent<
  [string, BigNumber],
  CooldownInitializeEventObject
>;

export type CooldownInitializeEventFilter =
  TypedEventFilter<CooldownInitializeEvent>;

export interface CooldownTriggeredEventObject {
  sender: string;
  cooldownExpiry: BigNumber;
}
export type CooldownTriggeredEvent = TypedEvent<
  [string, BigNumber],
  CooldownTriggeredEventObject
>;

export type CooldownTriggeredEventFilter =
  TypedEventFilter<CooldownTriggeredEvent>;

export interface EndEventObject {
  sender: string;
  saleStatus: number;
}
export type EndEvent = TypedEvent<[string, number], EndEventObject>;

export type EndEventFilter = TypedEventFilter<EndEvent>;

export interface InitializeEventObject {
  sender: string;
  config: SaleConfigStructOutput;
  saleRedeemableERC20Config: SaleRedeemableERC20ConfigStructOutput;
  token: string;
}
export type InitializeEvent = TypedEvent<
  [
    string,
    SaleConfigStructOutput,
    SaleRedeemableERC20ConfigStructOutput,
    string
  ],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MetaV1EventObject {
  sender: string;
  subject: BigNumber;
  meta: string;
}
export type MetaV1Event = TypedEvent<
  [string, BigNumber, string],
  MetaV1EventObject
>;

export type MetaV1EventFilter = TypedEventFilter<MetaV1Event>;

export interface RefundEventObject {
  sender: string;
  receipt: ReceiptStructOutput;
}
export type RefundEvent = TypedEvent<
  [string, ReceiptStructOutput],
  RefundEventObject
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface StartEventObject {
  sender: string;
}
export type StartEvent = TypedEvent<[string], StartEventObject>;

export type StartEventFilter = TypedEventFilter<StartEvent>;

export interface TimeoutEventObject {
  sender: string;
}
export type TimeoutEvent = TypedEvent<[string], TimeoutEventObject>;

export type TimeoutEventFilter = TypedEventFilter<TimeoutEvent>;

export interface Sale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      config_: BuyConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFees(
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    previewCalculateBuy(
      targetUnits_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    previewCanLive(overrides?: CallOverrides): Promise<[boolean]>;

    refund(
      receipt_: ReceiptStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remainingTokenInventory(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    saleStatus(overrides?: CallOverrides): Promise<[number]>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalReserveReceived(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  buy(
    config_: BuyConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFees(
    recipient_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  end(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  previewCalculateBuy(
    targetUnits_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  previewCanLive(overrides?: CallOverrides): Promise<boolean>;

  refund(
    receipt_: ReceiptStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remainingTokenInventory(overrides?: CallOverrides): Promise<BigNumber>;

  reserve(overrides?: CallOverrides): Promise<string>;

  saleStatus(overrides?: CallOverrides): Promise<number>;

  start(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeout(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalReserveReceived(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    buy(config_: BuyConfigStruct, overrides?: CallOverrides): Promise<void>;

    claimFees(
      recipient_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    end(overrides?: CallOverrides): Promise<void>;

    initialize(
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    previewCalculateBuy(
      targetUnits_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    previewCanLive(overrides?: CallOverrides): Promise<boolean>;

    refund(receipt_: ReceiptStruct, overrides?: CallOverrides): Promise<void>;

    remainingTokenInventory(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<string>;

    saleStatus(overrides?: CallOverrides): Promise<number>;

    start(overrides?: CallOverrides): Promise<void>;

    timeout(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    totalReserveReceived(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Buy(address,tuple,tuple)"(
      sender?: null,
      config?: null,
      receipt?: null
    ): BuyEventFilter;
    Buy(sender?: null, config?: null, receipt?: null): BuyEventFilter;

    "Construct(address,tuple)"(
      sender?: null,
      config?: null
    ): ConstructEventFilter;
    Construct(sender?: null, config?: null): ConstructEventFilter;

    "Context(address,uint256[][])"(
      sender?: null,
      context?: null
    ): ContextEventFilter;
    Context(sender?: null, context?: null): ContextEventFilter;

    "CooldownInitialize(address,uint256)"(
      sender?: null,
      cooldownDuration?: null
    ): CooldownInitializeEventFilter;
    CooldownInitialize(
      sender?: null,
      cooldownDuration?: null
    ): CooldownInitializeEventFilter;

    "CooldownTriggered(address,uint256)"(
      sender?: null,
      cooldownExpiry?: null
    ): CooldownTriggeredEventFilter;
    CooldownTriggered(
      sender?: null,
      cooldownExpiry?: null
    ): CooldownTriggeredEventFilter;

    "End(address,uint8)"(sender?: null, saleStatus?: null): EndEventFilter;
    End(sender?: null, saleStatus?: null): EndEventFilter;

    "Initialize(address,tuple,tuple,address)"(
      sender?: null,
      config?: null,
      saleRedeemableERC20Config?: null,
      token?: null
    ): InitializeEventFilter;
    Initialize(
      sender?: null,
      config?: null,
      saleRedeemableERC20Config?: null,
      token?: null
    ): InitializeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MetaV1(address,uint256,bytes)"(
      sender?: null,
      subject?: null,
      meta?: null
    ): MetaV1EventFilter;
    MetaV1(sender?: null, subject?: null, meta?: null): MetaV1EventFilter;

    "Refund(address,tuple)"(sender?: null, receipt?: null): RefundEventFilter;
    Refund(sender?: null, receipt?: null): RefundEventFilter;

    "Start(address)"(sender?: null): StartEventFilter;
    Start(sender?: null): StartEventFilter;

    "Timeout(address)"(sender?: null): TimeoutEventFilter;
    Timeout(sender?: null): TimeoutEventFilter;
  };

  estimateGas: {
    buy(
      config_: BuyConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFees(
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    previewCalculateBuy(
      targetUnits_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewCanLive(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      receipt_: ReceiptStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remainingTokenInventory(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    saleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserveReceived(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      config_: BuyConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFees(
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    previewCalculateBuy(
      targetUnits_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewCanLive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      receipt_: ReceiptStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remainingTokenInventory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserveReceived(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
