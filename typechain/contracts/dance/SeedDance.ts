/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TimeBoundStruct = {
  baseDuration: PromiseOrValue<BigNumberish>;
  maxExtraTime: PromiseOrValue<BigNumberish>;
};

export type TimeBoundStructOutput = [number, number] & {
  baseDuration: number;
  maxExtraTime: number;
};

export interface SeedDanceInterface extends utils.Interface {
  functions: {
    "canRevealUntil(uint256,uint256,(uint32,uint32),address)": FunctionFragment;
    "danceStartedAt()": FunctionFragment;
    "sharedSeed()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "canRevealUntil" | "danceStartedAt" | "sharedSeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canRevealUntil",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      TimeBoundStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "danceStartedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharedSeed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "canRevealUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "danceStartedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sharedSeed", data: BytesLike): Result;

  events: {
    "Commit(address,uint256)": EventFragment;
    "Reveal(address,uint256,uint256)": EventFragment;
    "Start(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Commit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reveal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
}

export interface CommitEventObject {
  sender: string;
  commitment: BigNumber;
}
export type CommitEvent = TypedEvent<[string, BigNumber], CommitEventObject>;

export type CommitEventFilter = TypedEventFilter<CommitEvent>;

export interface RevealEventObject {
  sender: string;
  secret: BigNumber;
  newSeed: BigNumber;
}
export type RevealEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RevealEventObject
>;

export type RevealEventFilter = TypedEventFilter<RevealEvent>;

export interface StartEventObject {
  sender: string;
  initialSeed: BigNumber;
}
export type StartEvent = TypedEvent<[string, BigNumber], StartEventObject>;

export type StartEventFilter = TypedEventFilter<StartEvent>;

export interface SeedDance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeedDanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canRevealUntil(
      seed_: PromiseOrValue<BigNumberish>,
      start_: PromiseOrValue<BigNumberish>,
      timeBound_: TimeBoundStruct,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { until_: BigNumber }>;

    danceStartedAt(overrides?: CallOverrides): Promise<[number]>;

    sharedSeed(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  canRevealUntil(
    seed_: PromiseOrValue<BigNumberish>,
    start_: PromiseOrValue<BigNumberish>,
    timeBound_: TimeBoundStruct,
    owner_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  danceStartedAt(overrides?: CallOverrides): Promise<number>;

  sharedSeed(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    canRevealUntil(
      seed_: PromiseOrValue<BigNumberish>,
      start_: PromiseOrValue<BigNumberish>,
      timeBound_: TimeBoundStruct,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    danceStartedAt(overrides?: CallOverrides): Promise<number>;

    sharedSeed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Commit(address,uint256)"(
      sender?: null,
      commitment?: null
    ): CommitEventFilter;
    Commit(sender?: null, commitment?: null): CommitEventFilter;

    "Reveal(address,uint256,uint256)"(
      sender?: null,
      secret?: null,
      newSeed?: null
    ): RevealEventFilter;
    Reveal(sender?: null, secret?: null, newSeed?: null): RevealEventFilter;

    "Start(address,uint256)"(
      sender?: null,
      initialSeed?: null
    ): StartEventFilter;
    Start(sender?: null, initialSeed?: null): StartEventFilter;
  };

  estimateGas: {
    canRevealUntil(
      seed_: PromiseOrValue<BigNumberish>,
      start_: PromiseOrValue<BigNumberish>,
      timeBound_: TimeBoundStruct,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    danceStartedAt(overrides?: CallOverrides): Promise<BigNumber>;

    sharedSeed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canRevealUntil(
      seed_: PromiseOrValue<BigNumberish>,
      start_: PromiseOrValue<BigNumberish>,
      timeBound_: TimeBoundStruct,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    danceStartedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sharedSeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
