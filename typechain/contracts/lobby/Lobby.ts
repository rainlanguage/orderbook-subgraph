/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type DeployerDiscoverableMetaV1ConstructionConfigStruct = {
  deployer: PromiseOrValue<string>;
  meta: PromiseOrValue<BytesLike>;
};

export type DeployerDiscoverableMetaV1ConstructionConfigStructOutput = [
  string,
  string
] & { deployer: string; meta: string };

export type LobbyConstructorConfigStruct = {
  maxTimeoutDuration: PromiseOrValue<BigNumberish>;
  deployerDiscoverableMetaConfig: DeployerDiscoverableMetaV1ConstructionConfigStruct;
};

export type LobbyConstructorConfigStructOutput = [
  BigNumber,
  DeployerDiscoverableMetaV1ConstructionConfigStructOutput
] & {
  maxTimeoutDuration: BigNumber;
  deployerDiscoverableMetaConfig: DeployerDiscoverableMetaV1ConstructionConfigStructOutput;
};

export type EvaluableConfigStruct = {
  deployer: PromiseOrValue<string>;
  sources: PromiseOrValue<BytesLike>[];
  constants: PromiseOrValue<BigNumberish>[];
};

export type EvaluableConfigStructOutput = [string, string[], BigNumber[]] & {
  deployer: string;
  sources: string[];
  constants: BigNumber[];
};

export type LobbyConfigStruct = {
  refMustAgree: PromiseOrValue<boolean>;
  ref: PromiseOrValue<string>;
  token: PromiseOrValue<string>;
  evaluableConfig: EvaluableConfigStruct;
  description: PromiseOrValue<BytesLike>;
  timeoutDuration: PromiseOrValue<BigNumberish>;
};

export type LobbyConfigStructOutput = [
  boolean,
  string,
  string,
  EvaluableConfigStructOutput,
  string,
  BigNumber
] & {
  refMustAgree: boolean;
  ref: string;
  token: string;
  evaluableConfig: EvaluableConfigStructOutput;
  description: string;
  timeoutDuration: BigNumber;
};

export type SignedContextV1Struct = {
  signer: PromiseOrValue<string>;
  context: PromiseOrValue<BigNumberish>[];
  signature: PromiseOrValue<BytesLike>;
};

export type SignedContextV1StructOutput = [string, BigNumber[], string] & {
  signer: string;
  context: BigNumber[];
  signature: string;
};

export interface LobbyInterface extends utils.Interface {
  functions: {
    "claim(uint256[],(address,uint256[],bytes)[])": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "invalid(uint256[],(address,uint256[],bytes)[])": FunctionFragment;
    "join(uint256[],(address,uint256[],bytes)[])": FunctionFragment;
    "leave(uint256[],(address,uint256[],bytes)[])": FunctionFragment;
    "phaseAtTime(uint32[8],uint256)": FunctionFragment;
    "phaseTimes(uint256)": FunctionFragment;
    "refAgrees()": FunctionFragment;
    "refund()": FunctionFragment;
    "timeForPhase(uint32[8],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "currentPhase"
      | "deposit"
      | "initialize"
      | "invalid"
      | "join"
      | "leave"
      | "phaseAtTime"
      | "phaseTimes"
      | "refAgrees"
      | "refund"
      | "timeForPhase"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>[], SignedContextV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "invalid",
    values: [PromiseOrValue<BigNumberish>[], SignedContextV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [PromiseOrValue<BigNumberish>[], SignedContextV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "leave",
    values: [PromiseOrValue<BigNumberish>[], SignedContextV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "phaseAtTime",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "phaseTimes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "refAgrees", values?: undefined): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeForPhase",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invalid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phaseAtTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "phaseTimes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refAgrees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeForPhase",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256,uint256)": EventFragment;
    "Context(address,uint256[][])": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "Initialize(address,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Invalid(address,uint256[],tuple[])": EventFragment;
    "Join(address)": EventFragment;
    "Leave(address,address,uint256,uint256)": EventFragment;
    "MetaV1(address,uint256,bytes)": EventFragment;
    "PhaseScheduled(address,uint256,uint256)": EventFragment;
    "PlayersFinalised(address)": EventFragment;
    "Refund(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Context"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invalid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Join"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Leave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaV1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayersFinalised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
}

export interface ClaimEventObject {
  sender: string;
  share: BigNumber;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ContextEventObject {
  sender: string;
  context: BigNumber[][];
}
export type ContextEvent = TypedEvent<
  [string, BigNumber[][]],
  ContextEventObject
>;

export type ContextEventFilter = TypedEventFilter<ContextEvent>;

export interface DepositEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializeEventObject {
  sender: string;
  config: LobbyConfigStructOutput;
}
export type InitializeEvent = TypedEvent<
  [string, LobbyConfigStructOutput],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InvalidEventObject {
  sender: string;
  callerContext: BigNumber[];
  signedContext: SignedContextV1StructOutput[];
}
export type InvalidEvent = TypedEvent<
  [string, BigNumber[], SignedContextV1StructOutput[]],
  InvalidEventObject
>;

export type InvalidEventFilter = TypedEventFilter<InvalidEvent>;

export interface JoinEventObject {
  sender: string;
}
export type JoinEvent = TypedEvent<[string], JoinEventObject>;

export type JoinEventFilter = TypedEventFilter<JoinEvent>;

export interface LeaveEventObject {
  sender: string;
  token: string;
  deposit: BigNumber;
  amount: BigNumber;
}
export type LeaveEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LeaveEventObject
>;

export type LeaveEventFilter = TypedEventFilter<LeaveEvent>;

export interface MetaV1EventObject {
  sender: string;
  subject: BigNumber;
  meta: string;
}
export type MetaV1Event = TypedEvent<
  [string, BigNumber, string],
  MetaV1EventObject
>;

export type MetaV1EventFilter = TypedEventFilter<MetaV1Event>;

export interface PhaseScheduledEventObject {
  sender: string;
  newPhase: BigNumber;
  scheduledTime: BigNumber;
}
export type PhaseScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PhaseScheduledEventObject
>;

export type PhaseScheduledEventFilter = TypedEventFilter<PhaseScheduledEvent>;

export interface PlayersFinalisedEventObject {
  sender: string;
}
export type PlayersFinalisedEvent = TypedEvent<
  [string],
  PlayersFinalisedEventObject
>;

export type PlayersFinalisedEventFilter =
  TypedEventFilter<PlayersFinalisedEvent>;

export interface RefundEventObject {
  sender: string;
  amount: BigNumber;
}
export type RefundEvent = TypedEvent<[string, BigNumber], RefundEventObject>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface Lobby extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LobbyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentPhase(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { phase_: BigNumber }>;

    deposit(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invalid(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    join(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leave(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContext_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    phaseAtTime(
      phaseTimes_: PromiseOrValue<BigNumberish>[],
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { phase_: BigNumber }>;

    phaseTimes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    refAgrees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeForPhase(
      phaseTimes_: PromiseOrValue<BigNumberish>[],
      phase_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp_: BigNumber }>;
  };

  claim(
    callerContext_: PromiseOrValue<BigNumberish>[],
    signedContexts_: SignedContextV1Struct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invalid(
    callerContext_: PromiseOrValue<BigNumberish>[],
    signedContexts_: SignedContextV1Struct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  join(
    callerContext_: PromiseOrValue<BigNumberish>[],
    signedContexts_: SignedContextV1Struct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leave(
    callerContext_: PromiseOrValue<BigNumberish>[],
    signedContext_: SignedContextV1Struct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  phaseAtTime(
    phaseTimes_: PromiseOrValue<BigNumberish>[],
    timestamp_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  phaseTimes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  refAgrees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeForPhase(
    phaseTimes_: PromiseOrValue<BigNumberish>[],
    phase_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    claim(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    invalid(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    join(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    leave(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContext_: SignedContextV1Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    phaseAtTime(
      phaseTimes_: PromiseOrValue<BigNumberish>[],
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phaseTimes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    refAgrees(overrides?: CallOverrides): Promise<void>;

    refund(overrides?: CallOverrides): Promise<void>;

    timeForPhase(
      phaseTimes_: PromiseOrValue<BigNumberish>[],
      phase_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Claim(address,uint256,uint256)"(
      sender?: null,
      share?: null,
      amount?: null
    ): ClaimEventFilter;
    Claim(sender?: null, share?: null, amount?: null): ClaimEventFilter;

    "Context(address,uint256[][])"(
      sender?: null,
      context?: null
    ): ContextEventFilter;
    Context(sender?: null, context?: null): ContextEventFilter;

    "Deposit(address,address,uint256)"(
      sender?: null,
      token?: null,
      amount?: null
    ): DepositEventFilter;
    Deposit(sender?: null, token?: null, amount?: null): DepositEventFilter;

    "Initialize(address,tuple)"(
      sender?: null,
      config?: null
    ): InitializeEventFilter;
    Initialize(sender?: null, config?: null): InitializeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Invalid(address,uint256[],tuple[])"(
      sender?: null,
      callerContext?: null,
      signedContext?: null
    ): InvalidEventFilter;
    Invalid(
      sender?: null,
      callerContext?: null,
      signedContext?: null
    ): InvalidEventFilter;

    "Join(address)"(sender?: null): JoinEventFilter;
    Join(sender?: null): JoinEventFilter;

    "Leave(address,address,uint256,uint256)"(
      sender?: null,
      token?: null,
      deposit?: null,
      amount?: null
    ): LeaveEventFilter;
    Leave(
      sender?: null,
      token?: null,
      deposit?: null,
      amount?: null
    ): LeaveEventFilter;

    "MetaV1(address,uint256,bytes)"(
      sender?: null,
      subject?: null,
      meta?: null
    ): MetaV1EventFilter;
    MetaV1(sender?: null, subject?: null, meta?: null): MetaV1EventFilter;

    "PhaseScheduled(address,uint256,uint256)"(
      sender?: null,
      newPhase?: null,
      scheduledTime?: null
    ): PhaseScheduledEventFilter;
    PhaseScheduled(
      sender?: null,
      newPhase?: null,
      scheduledTime?: null
    ): PhaseScheduledEventFilter;

    "PlayersFinalised(address)"(sender?: null): PlayersFinalisedEventFilter;
    PlayersFinalised(sender?: null): PlayersFinalisedEventFilter;

    "Refund(address,uint256)"(sender?: null, amount?: null): RefundEventFilter;
    Refund(sender?: null, amount?: null): RefundEventFilter;
  };

  estimateGas: {
    claim(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invalid(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    join(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leave(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContext_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    phaseAtTime(
      phaseTimes_: PromiseOrValue<BigNumberish>[],
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phaseTimes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refAgrees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeForPhase(
      phaseTimes_: PromiseOrValue<BigNumberish>[],
      phase_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invalid(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    join(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContexts_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leave(
      callerContext_: PromiseOrValue<BigNumberish>[],
      signedContext_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    phaseAtTime(
      phaseTimes_: PromiseOrValue<BigNumberish>[],
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phaseTimes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refAgrees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeForPhase(
      phaseTimes_: PromiseOrValue<BigNumberish>[],
      phase_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
