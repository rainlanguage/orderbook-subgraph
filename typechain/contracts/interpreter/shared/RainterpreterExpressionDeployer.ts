/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type RainterpreterExpressionDeployerConstructionConfigStruct = {
  interpreter: PromiseOrValue<string>;
  store: PromiseOrValue<string>;
  meta: PromiseOrValue<BytesLike>;
};

export type RainterpreterExpressionDeployerConstructionConfigStructOutput = [
  string,
  string,
  string
] & { interpreter: string; store: string; meta: string };

export interface RainterpreterExpressionDeployerInterface
  extends utils.Interface {
  functions: {
    "deployExpression(bytes[],uint256[],uint256[])": FunctionFragment;
    "interpreter()": FunctionFragment;
    "offchainDebugEval(bytes[],uint256[],uint256,uint256[][],uint16,uint256[],uint256)": FunctionFragment;
    "store()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployExpression"
      | "interpreter"
      | "offchainDebugEval"
      | "store"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployExpression",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interpreter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offchainDebugEval",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[][],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployExpression",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interpreter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offchainDebugEval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "DISpair(address,address,address,address,bytes)": EventFragment;
    "ExpressionAddress(address,address)": EventFragment;
    "NewExpression(address,bytes[],uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DISpair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpressionAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExpression"): EventFragment;
}

export interface DISpairEventObject {
  sender: string;
  deployer: string;
  interpreter: string;
  store: string;
  opMeta: string;
}
export type DISpairEvent = TypedEvent<
  [string, string, string, string, string],
  DISpairEventObject
>;

export type DISpairEventFilter = TypedEventFilter<DISpairEvent>;

export interface ExpressionAddressEventObject {
  sender: string;
  expression: string;
}
export type ExpressionAddressEvent = TypedEvent<
  [string, string],
  ExpressionAddressEventObject
>;

export type ExpressionAddressEventFilter =
  TypedEventFilter<ExpressionAddressEvent>;

export interface NewExpressionEventObject {
  sender: string;
  sources: string[];
  constants: BigNumber[];
  minOutputs: BigNumber[];
}
export type NewExpressionEvent = TypedEvent<
  [string, string[], BigNumber[], BigNumber[]],
  NewExpressionEventObject
>;

export type NewExpressionEventFilter = TypedEventFilter<NewExpressionEvent>;

export interface RainterpreterExpressionDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RainterpreterExpressionDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployExpression(
      sources_: PromiseOrValue<BytesLike>[],
      constants_: PromiseOrValue<BigNumberish>[],
      minOutputs_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interpreter(overrides?: CallOverrides): Promise<[string]>;

    offchainDebugEval(
      sources_: PromiseOrValue<BytesLike>[],
      constants_: PromiseOrValue<BigNumberish>[],
      namespace_: PromiseOrValue<BigNumberish>,
      context_: PromiseOrValue<BigNumberish>[][],
      sourceIndex_: PromiseOrValue<BigNumberish>,
      initialStack_: PromiseOrValue<BigNumberish>[],
      minOutputs_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    store(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  deployExpression(
    sources_: PromiseOrValue<BytesLike>[],
    constants_: PromiseOrValue<BigNumberish>[],
    minOutputs_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interpreter(overrides?: CallOverrides): Promise<string>;

  offchainDebugEval(
    sources_: PromiseOrValue<BytesLike>[],
    constants_: PromiseOrValue<BigNumberish>[],
    namespace_: PromiseOrValue<BigNumberish>,
    context_: PromiseOrValue<BigNumberish>[][],
    sourceIndex_: PromiseOrValue<BigNumberish>,
    initialStack_: PromiseOrValue<BigNumberish>[],
    minOutputs_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  store(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    deployExpression(
      sources_: PromiseOrValue<BytesLike>[],
      constants_: PromiseOrValue<BigNumberish>[],
      minOutputs_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    interpreter(overrides?: CallOverrides): Promise<string>;

    offchainDebugEval(
      sources_: PromiseOrValue<BytesLike>[],
      constants_: PromiseOrValue<BigNumberish>[],
      namespace_: PromiseOrValue<BigNumberish>,
      context_: PromiseOrValue<BigNumberish>[][],
      sourceIndex_: PromiseOrValue<BigNumberish>,
      initialStack_: PromiseOrValue<BigNumberish>[],
      minOutputs_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    store(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DISpair(address,address,address,address,bytes)"(
      sender?: null,
      deployer?: null,
      interpreter?: null,
      store?: null,
      opMeta?: null
    ): DISpairEventFilter;
    DISpair(
      sender?: null,
      deployer?: null,
      interpreter?: null,
      store?: null,
      opMeta?: null
    ): DISpairEventFilter;

    "ExpressionAddress(address,address)"(
      sender?: null,
      expression?: null
    ): ExpressionAddressEventFilter;
    ExpressionAddress(
      sender?: null,
      expression?: null
    ): ExpressionAddressEventFilter;

    "NewExpression(address,bytes[],uint256[],uint256[])"(
      sender?: null,
      sources?: null,
      constants?: null,
      minOutputs?: null
    ): NewExpressionEventFilter;
    NewExpression(
      sender?: null,
      sources?: null,
      constants?: null,
      minOutputs?: null
    ): NewExpressionEventFilter;
  };

  estimateGas: {
    deployExpression(
      sources_: PromiseOrValue<BytesLike>[],
      constants_: PromiseOrValue<BigNumberish>[],
      minOutputs_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interpreter(overrides?: CallOverrides): Promise<BigNumber>;

    offchainDebugEval(
      sources_: PromiseOrValue<BytesLike>[],
      constants_: PromiseOrValue<BigNumberish>[],
      namespace_: PromiseOrValue<BigNumberish>,
      context_: PromiseOrValue<BigNumberish>[][],
      sourceIndex_: PromiseOrValue<BigNumberish>,
      initialStack_: PromiseOrValue<BigNumberish>[],
      minOutputs_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployExpression(
      sources_: PromiseOrValue<BytesLike>[],
      constants_: PromiseOrValue<BigNumberish>[],
      minOutputs_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interpreter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offchainDebugEval(
      sources_: PromiseOrValue<BytesLike>[],
      constants_: PromiseOrValue<BigNumberish>[],
      namespace_: PromiseOrValue<BigNumberish>,
      context_: PromiseOrValue<BigNumberish>[][],
      sourceIndex_: PromiseOrValue<BigNumberish>,
      initialStack_: PromiseOrValue<BigNumberish>[],
      minOutputs_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
