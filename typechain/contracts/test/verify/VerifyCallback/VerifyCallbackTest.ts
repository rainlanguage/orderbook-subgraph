/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type EvidenceStruct = {
  account: PromiseOrValue<string>;
  data: PromiseOrValue<BytesLike>;
};

export type EvidenceStructOutput = [string, string] & {
  account: string;
  data: string;
};

export interface VerifyCallbackTestInterface extends utils.Interface {
  functions: {
    "additions(address)": FunctionFragment;
    "afterAdd(address,(address,bytes)[])": FunctionFragment;
    "afterApprove(address,(address,bytes)[])": FunctionFragment;
    "afterBan(address,(address,bytes)[])": FunctionFragment;
    "afterRemove(address,(address,bytes)[])": FunctionFragment;
    "approvals(address)": FunctionFragment;
    "bans(address)": FunctionFragment;
    "removals(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "additions"
      | "afterAdd"
      | "afterApprove"
      | "afterBan"
      | "afterRemove"
      | "approvals"
      | "bans"
      | "removals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "additions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAdd",
    values: [PromiseOrValue<string>, EvidenceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "afterApprove",
    values: [PromiseOrValue<string>, EvidenceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "afterBan",
    values: [PromiseOrValue<string>, EvidenceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRemove",
    values: [PromiseOrValue<string>, EvidenceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approvals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bans",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removals",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "additions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterAdd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterBan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approvals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removals", data: BytesLike): Result;

  events: {};
}

export interface VerifyCallbackTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifyCallbackTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    additions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    afterAdd(
      adder_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterApprove(
      approver_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterBan(
      banner_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterRemove(
      remover_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  additions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  afterAdd(
    adder_: PromiseOrValue<string>,
    evidences_: EvidenceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterApprove(
    approver_: PromiseOrValue<string>,
    evidences_: EvidenceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterBan(
    banner_: PromiseOrValue<string>,
    evidences_: EvidenceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterRemove(
    remover_: PromiseOrValue<string>,
    evidences_: EvidenceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bans(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    additions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    afterAdd(
      adder_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    afterApprove(
      approver_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    afterBan(
      banner_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    afterRemove(
      remover_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    approvals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    additions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    afterAdd(
      adder_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterApprove(
      approver_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterBan(
      banner_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterRemove(
      remover_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    additions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    afterAdd(
      adder_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterApprove(
      approver_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterBan(
      banner_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterRemove(
      remover_: PromiseOrValue<string>,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
