/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IExpressionDeployerV1Interface extends utils.Interface {
  functions: {
    "deployExpression(bytes[],uint256[],uint256[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "deployExpression"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployExpression",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployExpression",
    data: BytesLike
  ): Result;

  events: {
    "DISpair(address,address,address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DISpair"): EventFragment;
}

export interface DISpairEventObject {
  sender: string;
  deployer: string;
  interpreter: string;
  store: string;
  opMeta: string;
}
export type DISpairEvent = TypedEvent<
  [string, string, string, string, string],
  DISpairEventObject
>;

export type DISpairEventFilter = TypedEventFilter<DISpairEvent>;

export interface IExpressionDeployerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExpressionDeployerV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployExpression(
      sources: PromiseOrValue<BytesLike>[],
      constants: PromiseOrValue<BigNumberish>[],
      minOutputs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deployExpression(
    sources: PromiseOrValue<BytesLike>[],
    constants: PromiseOrValue<BigNumberish>[],
    minOutputs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployExpression(
      sources: PromiseOrValue<BytesLike>[],
      constants: PromiseOrValue<BigNumberish>[],
      minOutputs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        interpreter: string;
        store: string;
        expression: string;
      }
    >;
  };

  filters: {
    "DISpair(address,address,address,address,bytes)"(
      sender?: null,
      deployer?: null,
      interpreter?: null,
      store?: null,
      opMeta?: null
    ): DISpairEventFilter;
    DISpair(
      sender?: null,
      deployer?: null,
      interpreter?: null,
      store?: null,
      opMeta?: null
    ): DISpairEventFilter;
  };

  estimateGas: {
    deployExpression(
      sources: PromiseOrValue<BytesLike>[],
      constants: PromiseOrValue<BigNumberish>[],
      minOutputs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployExpression(
      sources: PromiseOrValue<BytesLike>[],
      constants: PromiseOrValue<BigNumberish>[],
      minOutputs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
