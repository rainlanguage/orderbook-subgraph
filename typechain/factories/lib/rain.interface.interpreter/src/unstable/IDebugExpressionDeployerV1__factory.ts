/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IDebugExpressionDeployerV1,
  IDebugExpressionDeployerV1Interface,
} from "../../../../../lib/rain.interface.interpreter/src/unstable/IDebugExpressionDeployerV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "sources",
        type: "bytes[]",
      },
      {
        internalType: "uint256[]",
        name: "constants",
        type: "uint256[]",
      },
      {
        internalType: "FullyQualifiedNamespace",
        name: "namespace",
        type: "uint256",
      },
      {
        internalType: "uint256[][]",
        name: "context",
        type: "uint256[][]",
      },
      {
        internalType: "SourceIndex",
        name: "sourceIndex",
        type: "uint16",
      },
      {
        internalType: "uint256[]",
        name: "initialStack",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "minOutputs",
        type: "uint256",
      },
    ],
    name: "offchainDebugEval",
    outputs: [
      {
        internalType: "uint256[]",
        name: "finalStack",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "kvs",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IDebugExpressionDeployerV1__factory {
  static readonly abi = _abi;
  static createInterface(): IDebugExpressionDeployerV1Interface {
    return new utils.Interface(_abi) as IDebugExpressionDeployerV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDebugExpressionDeployerV1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IDebugExpressionDeployerV1;
  }
}
