/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICloneableFactoryV1,
  ICloneableFactoryV1Interface,
} from "../../../../../lib/rain.interface.factory/src/ICloneFactoryV1.sol/ICloneableFactoryV1";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "clone",
        type: "address",
      },
    ],
    name: "NewClone",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "clone",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ICloneableFactoryV1__factory {
  static readonly abi = _abi;
  static createInterface(): ICloneableFactoryV1Interface {
    return new utils.Interface(_abi) as ICloneableFactoryV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICloneableFactoryV1 {
    return new Contract(address, _abi, signerOrProvider) as ICloneableFactoryV1;
  }
}
