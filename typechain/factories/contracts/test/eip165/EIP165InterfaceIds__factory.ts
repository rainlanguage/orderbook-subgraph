/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  EIP165InterfaceIds,
  EIP165InterfaceIdsInterface,
} from "../../../../contracts/test/eip165/EIP165InterfaceIds";

const _abi = [
  {
    inputs: [],
    name: "IERC165InterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IExpressionDeployerV1InterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IInterpreterCallerV1InterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IInterpreterCallerV2InterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IInterpreterExternV1InterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IInterpreterStoreV1InterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IInterpreterV1InterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101b8806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638115866b1161005b5780638115866b1461010d5780638423359214610105578063965074b514610134578063cbe9b7d11461015b57600080fd5b80630ec17df814610082578063750fa0aa146100de57806375cfcf3014610105575b600080fd5b6100a97f5511cb670000000000000000000000000000000000000000000000000000000081565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b6100a97ff2f4e56c0000000000000000000000000000000000000000000000000000000081565b6100a9600081565b6100a97f9e263f0a0000000000000000000000000000000000000000000000000000000081565b6100a97fb65ad6830000000000000000000000000000000000000000000000000000000081565b6100a97f01ffc9a7000000000000000000000000000000000000000000000000000000008156fea264697066735822122024da8bd2896adcb3277858cdeb653828c8d618285f5be157a6310f921b76ecef64736f6c63430008130033";

type EIP165InterfaceIdsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EIP165InterfaceIdsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EIP165InterfaceIds__factory extends ContractFactory {
  constructor(...args: EIP165InterfaceIdsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EIP165InterfaceIds> {
    return super.deploy(overrides || {}) as Promise<EIP165InterfaceIds>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EIP165InterfaceIds {
    return super.attach(address) as EIP165InterfaceIds;
  }
  override connect(signer: Signer): EIP165InterfaceIds__factory {
    return super.connect(signer) as EIP165InterfaceIds__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EIP165InterfaceIdsInterface {
    return new utils.Interface(_abi) as EIP165InterfaceIdsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EIP165InterfaceIds {
    return new Contract(address, _abi, signerOrProvider) as EIP165InterfaceIds;
  }
}
