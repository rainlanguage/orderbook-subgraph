/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  RandomTest,
  RandomTestInterface,
} from "../../../../../contracts/test/math/Random/RandomTest";

const _abi = [
  {
    inputs: [],
    name: "ReadError",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "max_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "n_",
        type: "uint256",
      },
    ],
    name: "microLottery",
    outputs: [
      {
        internalType: "uint256",
        name: "item_",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
    ],
    name: "randomId",
    outputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "len_",
        type: "uint256",
      },
    ],
    name: "shuffle",
    outputs: [
      {
        internalType: "bytes",
        name: "shuffled_",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
    ],
    name: "shuffleIdAtIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shuffled",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610868806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806361d4ba9b1161005057806361d4ba9b146100b25780638f1ea97f146100d4578063bffa7fe8146100e757600080fd5b80631715b9ee1461006c57806329fa6d0214610092575b600080fd5b61007f61007a3660046106f6565b61012c565b6040519081526020015b60405180910390f35b6100a56100a0366004610722565b610141565b6040516100899190610744565b61007f6100c0366004610722565b600260015560009182526020526040902090565b61007f6100e23660046107b0565b61024e565b6000546101079073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610089565b6000610139848484610299565b949350505050565b606061014d838361045b565b90506000806101de835160408051602c83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681019091527effff0000000000000000000000000000000000000000000000000000000000600190920160e81b919091167f61000080600c6000396000f3000000000000000000000000000000000000000017815290600d820190565b915091506101f76101ef8460200190565b828551610555565b610200826105d2565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550909392505050565b600180556000805473ffffffffffffffffffffffffffffffffffffffff166102768184610640565b915060006102858460016107c9565b90506102918282610640565b505050919050565b6000828210610309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4d41585f4e00000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60ff831115610374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4d41585f4d4158000000000000000000000000000000000000000000000000006044820152606401610300565b60008367ffffffffffffffff81111561038f5761038f610803565b6040519080825280601f01601f1916602001820160405280156103b9576020820181803683370190505b5090506103d6565b8082015160ff16806103d05750815b92915050565b846000526020810160018201600186035b85811115610434576103f981836103c1565b60206000908120908190526001830190068401537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016103e7565b50602060009081209081905261045090600187019006826103c1565b979650505050505050565b60608160020267ffffffffffffffff81111561047957610479610803565b6040519080825280601f01601f1916602001820160405280156104a3576020820181803683370190505b50905082600052600281017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000061ffff600185035b801561054b576002810284018051838116806104f05750825b60206000208060005260018501810690506002810288018051878116806105145750825b948916909417909452509085161790527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016104d7565b5050505092915050565b5b602081106105935782518252602092830192909101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001610556565b80156105cd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600882021c808351168119855116178352505b505050565b6000806000600d9050835160e81c61ffff168101846000f0915073ffffffffffffffffffffffffffffffffffffffff8216610639576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5092915050565b600080826002029050600061065785836002610668565b6002015161ffff1695945050505050565b6060833b60018481019084860101808310156106b0576040517f26a9f61e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051603f87017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681019091528581529350848260208601893c5050509392505050565b60008060006060848603121561070b57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561073557600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561077157858101830151858201604001528201610755565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156107c257600080fd5b5035919050565b808201808211156103d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220a41819bb51157a2088fbe97b55c51c76b1653e7aaf7dcfcb3da94cc5f74a931964736f6c63430008130033";

type RandomTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomTest__factory extends ContractFactory {
  constructor(...args: RandomTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RandomTest> {
    return super.deploy(overrides || {}) as Promise<RandomTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RandomTest {
    return super.attach(address) as RandomTest;
  }
  override connect(signer: Signer): RandomTest__factory {
    return super.connect(signer) as RandomTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomTestInterface {
    return new utils.Interface(_abi) as RandomTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomTest {
    return new Contract(address, _abi, signerOrProvider) as RandomTest;
  }
}
