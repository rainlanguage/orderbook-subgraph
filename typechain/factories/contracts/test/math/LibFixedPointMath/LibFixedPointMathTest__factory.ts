/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  LibFixedPointMathTest,
  LibFixedPointMathTestInterface,
} from "../../../../../contracts/test/math/LibFixedPointMath/LibFixedPointMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b_",
        type: "uint256",
      },
      {
        internalType: "enum MathUpgradeable.Rounding",
        name: "rounding_",
        type: "uint8",
      },
    ],
    name: "fixedPointDiv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b_",
        type: "uint256",
      },
      {
        internalType: "enum MathUpgradeable.Rounding",
        name: "rounding_",
        type: "uint8",
      },
    ],
    name: "fixedPointMul",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102fa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632f467d4d1461003b5780636eb357f414610060575b600080fd5b61004e6100493660046101e9565b610073565b60405190815260200160405180910390f35b61004e61006e3660046101e9565b61008a565b6000610080848484610097565b90505b9392505050565b60006100808484846100ad565b600061008084670de0b6b3a764000085856100bf565b60006100808484670de0b6b3a7640000855b6000806100cd86868661011c565b905060018360028111156100e3576100e3610226565b1480156101005750600084806100fb576100fb610255565b868809115b1561011357610110600182610284565b90505b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000036101745783828161016a5761016a610255565b0492505050610083565b80841161018057600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806000606084860312156101fe57600080fd5b833592506020840135915060408401356003811061021b57600080fd5b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b808201808211156102be577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea264697066735822122016564434fa93734954e6b52e18ca4d7336210d02eaa8d81f9573b780569e262764736f6c63430008130033";

type LibFixedPointMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibFixedPointMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibFixedPointMathTest__factory extends ContractFactory {
  constructor(...args: LibFixedPointMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibFixedPointMathTest> {
    return super.deploy(overrides || {}) as Promise<LibFixedPointMathTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibFixedPointMathTest {
    return super.attach(address) as LibFixedPointMathTest;
  }
  override connect(signer: Signer): LibFixedPointMathTest__factory {
    return super.connect(signer) as LibFixedPointMathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibFixedPointMathTestInterface {
    return new utils.Interface(_abi) as LibFixedPointMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibFixedPointMathTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LibFixedPointMathTest;
  }
}
